.btn-group {
  display: flex;
  justify-content:space-around;
  width: 100%;
}
.block {
  display:block;
}
// Text-Weight 
strong{
  font-weight:bold;
}
// Text-Alignment
.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-left {
  text-align: left;
}

.text-justify {
  text-align: justify;
}

// Text-Case
.uppercase {
  text-transform: uppercase;
}

.lowercase {
  text-transform: lowercase;
}

.capitalize {
  text-transform: capitalize;
}

.bold {
  font-weight: bold;
}

.italic {
  font-style: italic;
}

.underline {
  text-decoration: underline;
}

.text-overline {
  text-decoration: overline;
}

.text-line-through {
  text-decoration: line-through;
}



// Generates a Max-Width to use simply add the class mw800 for example to generate a max-width of 800px
@for $i from 100 to 2000 {
  $class-name: mw#{$i};
  $max-width-value: #{$i}px;

  .#{$class-name} {
    max-width: $max-width-value;
    margin:0 auto;
  }
}
// In this code, we use a @for loop to iterate from 0 through 500. Inside the loop, we generate class names in the format mbXXX where XXX is the current value of $i. We also calculate the margin-bottom value based on $i. The loop will generate CSS classes for margin-bottom values ranging from 0px to 500px.
@for $i from 0 through 500 {
  $class-name: mb#{$i};
  $margin-bottom-value: #{$i}px;

  .#{$class-name} {
    margin-bottom: $margin-bottom-value;
  }
}

// For Margin-top 
@for $i from 0 through 500 {
  $class-name: mt#{$i};
  $margin-top-value: #{$i}px;

  .#{$class-name} {
    margin-top: $margin-top-value;
  }
}

// Rotate 
@for $angle from 0 through 360 {
  $class-name: rotate#{$angle};

  .#{$class-name} {
    transform: rotate(#{$angle}deg);
  }
}

// Padding vertical 
@for $value from 0 through 500 {
  $class-name: pv#{$value};
  $padding-value: #{$value}px;

  .#{$class-name} {
    padding-top: $padding-value;
    padding-bottom: $padding-value;
  }
}

// Height class 

@for $value from 1 through 100 {
  $class-name: h#{$value};
  $height-value: #{$value}vh;

  .#{$class-name} {
    height: $height-value;
  }
}

// Flexy items 
@mixin flex-utilities() {
  &.column {
    flex-flow: column;
  }
  &.align-items-center {
    align-items: center;
  }

  &.align-items-start {
    align-items: flex-start;
  }

  &.align-items-end {
    align-items: flex-end;
  }

  &.align-items-baseline {
    align-items: baseline;
  }

  &.align-items-stretch {
    align-items: stretch;
  }

  &.justify-content-center {
    justify-content: center;
  }

  &.justify-content-start {
    justify-content: flex-start;
  }

  &.justify-content-end {
    justify-content: flex-end;
  }

  &.justify-content-space-between {
    justify-content: space-between;
  }

  &.justify-content-space-around {
    justify-content: space-around;
  }
}

.flexy {
  display: flex;
  @include flex-utilities;
}  


$colors: (
  white: #fff,
  black: #000,
  highlight-color: #9e0000,
  accent-color: grey,
  dark:#1a1a1a,
  // Add more color names and values as needed
);

@each $color-name, $color-value in $colors {
  .bg-#{$color-name} {
    background-color: $color-value;
  }
}



@each $color-name, $color-value in $colors {
  .text-#{$color-name} {
    color: $color-value!important;
  }
}

